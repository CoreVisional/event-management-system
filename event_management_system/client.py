"""Handles all functionalities related to the customers."""

# Alex Chiew (TP056952)
# Achreen Kaur (TP063334)

import ems
from datetime import datetime


def display_customer_main_menu() -> list:
    """
    Display the main menu of the customer panel.

    :return: list
    """
    menu_list = [
        "Book Event Ticket",
        "View Event Categories",
        "View Event Details",
        "View / Edit Profile",
        "View Cart Items",
        "Logout",
    ]
    return menu_list


def display_profile_submenu():
    """
    Display the submenu of the profile menu.

    :return: list
    """
    menu_list = [
        "View Profile",
        "Edit Profile",
        "Back to Main Menu",
    ]
    return menu_list


def display_payment_method() -> list:
    """
    Display the payment method options.

    :return: list
    """
    payment_options = [
        "Credit Card",
        "Debit Card",
        "eWallet",
    ]
    return payment_options


def display_profile_modification_menu() -> list:
    """
    Display the submenu of the profile edit menu.

    :return: list
    """
    menu_list = [
        "Username",
        "Password",
        "Contact Number",
        "Email Address",
        "Back to Main Menu",
    ]
    return menu_list


def login() -> str:
    """
    Login to the system.

    :return: The username of the customer
    """
    client_file_path = "event_management_system/data/client.txt"
    account_details = ems.authenticate_login_credentials(client_file_path)
    print("\n" + ("*" * 42))
    print(f"\tWelcome Back, {account_details[2].upper()}!")
    print("*" * 42)
    return account_details[0]


def edit_profile(username: str) -> None:
    """
    Edit and update profile based on selected column.

    :return: None
    """
    client_filename = "event_management_system/data/client.txt"
    menu_prompt = "\nSelect the detail you wish to modify: "
    old_profile_record = ems.find_customer_record_by_username(username)
    new_profile_record = old_profile_record.copy()
    submenu = display_profile_modification_menu()
    record_difference = []

    while True:
        user_choice = ems.create_menu(submenu, menu_prompt)
        if user_choice == 1:
            new_profile_record[1] = input("\nEnter your new username: ")
            record_difference.append([old_profile_record, new_profile_record])
            print("\n\n** USERNAME UPDATED SUCCESSFULLY **")
        elif user_choice == 2:
            new_profile_record[2] = ems.validate_password("\nEnter your new password: ")
            record_difference.append([old_profile_record, new_profile_record])
            print("\n\n** PASSWORD UPDATED SUCCESSFULLY **")
        elif user_choice == 3:
            new_profile_record[-2] = input("\nEnter your new contact number: ")
            record_difference.append([old_profile_record, new_profile_record])
            print("\n\n** CONTACT NUMBER UPDATED SUCCESSFULLY **")
        elif user_choice == 4:
            new_profile_record[-1] = ems.validate_email(
                "\nEnter your new email address: "
            )
            record_difference.append([old_profile_record, new_profile_record])
            print("\n\n** EMAIL ADDRESS UPDATED SUCCESSFULLY **")
        elif user_choice == 5:
            break

        if not ems.ask_user_yes_no("\nWould you like to edit another value? (y/n): "):
            break

    ems.update_record(client_filename, record_difference)

    print("\n\n** PROFILE UPDATED SUCCESSFULLY **\n")
    print("-- BACK TO MENU --\n")


def view_profile(username: str) -> None:
    """
    Display user profile.

    :return: None
    """
    profile = ems.find_customer_record_by_username(username)
    print("\n\n** VIEWING PROFILE **")
    print(f"\n\033[1mUsername:\033[0m {profile[1]}")
    print(f"\033[1mPassword:\033[0m {profile[2]}")
    print(f"\033[1mName:\033[0m {profile[3]}")
    print(f"\033[1mAge:\033[0m {profile[4]}")
    print(f"\033[1mGender:\033[0m {profile[5]}")
    print(f"\033[1mDate of Birth:\033[0m {profile[6]}")
    print(f"\033[1mNationality:\033[0m {profile[7]}")
    print(f"\033[1mContact Number:\033[0m {profile[8]}")
    print(f"\033[1mEmail Address:\033[0m {profile[9]}\n")
    print("-- BACK TO MENU --\n")


def generate_data_id() -> str:
    """
    Generate a unique id for each record using microseconds.

    :return: A string of numbers for the id generated by datetime microseconds.
    """
    data_id = datetime.now().strftime("%f%f")
    return data_id


def create_event_tickets_file_headers() -> None:
    """
    Create the headers for the orders file.

    :return: None
    """
    event_tickets_file_path = "event_management_system/data/tickets.txt"
    ticket_headers = [
        "ticket_id",
        "event_name",
        "event_code",
        "username",
        "customer_name",
        "email_address",
        "contact_number",
        "event_venue",
        "event_date",
        "event_time",
        "event_price",
        "quantity",
    ]
    ems.add_file_headers(event_tickets_file_path, ticket_headers)


def create_cart_file_headers() -> None:
    """
    Create headers for the cart file.

    :return: None
    """
    cart_filename = "event_management_system/data/cart.txt"
    cart_headers = [
        "ticket_id",
        "event_name",
        "event_code",
        "username",
        "attendee_name",
        "price",
        "quantity",
        "total_price",
    ]
    ems.add_file_headers(cart_filename, cart_headers)


def book_event_ticket(username: str) -> list:
    """
    Book an event ticket.

    :return: list
    """
    create_event_tickets_file_headers()
    record_found = False
    master_list = []

    while True:
        event_summary = ems.get_event_summary()
        event_code = input("\nEnter the event code you wish to add to your cart: ")
        ticket_id = generate_data_id()

        for record in event_summary:
            if event_code == record[2]:
                event_name = record[0]
                event_code = record[2]
                event_price = record[3]
                event_date = record[5]
                event_time = record[6]
                event_venue = record[-3]
                customer_name = input("\n\nEnter your name: ")
                email_address = ems.validate_email("Enter your email address: ")
                contact_number = input("Enter your contact number: ")
                quantity = str(
                    ems.validate_int_input(
                        "Enter the number of tickets you wish to book: "
                    )
                )
                master_list.append(
                    [
                        ticket_id[:4],
                        event_name,
                        event_code,
                        username,
                        customer_name,
                        email_address,
                        contact_number,
                        event_venue,
                        event_date,
                        event_time,
                        event_price,
                        quantity,
                    ]
                )
                record_found = True

        if not record_found:
            print("\n\n** Invalid event code. Please try again. **\n")
            continue

        if not ems.ask_user_yes_no(
            "\nWould you like to add another event to your cart? (y/n): "
        ):
            break

    return master_list


def save_details_to_file(filename: str, data: list) -> None:
    """
    Save data to file based on given filename.

    :filename: The name of the file to save the data to.
    :mode: Whether to append or write to file
    :data: Records to be saved to file
    :return: None
    """
    with open(filename, "a+") as file_handler:
        file_handler.seek(0)
        for records in data:
            file_handler.write(f"{';'.join(records)}\n")


def save_order_details(ticket_details: list) -> None:
    """
    Wrapper function to save the order details to the orders file.

    :return: None
    """
    orders_file_path = "event_management_system/data/tickets.txt"
    save_details_to_file(orders_file_path, ticket_details)


def save_orders_to_cart(ticket_details: list) -> None:
    """
    Wrapper function to save the order details to the cart file.

    :param ticket_details: Details containing the order details.
    :return: list
    """
    create_cart_file_headers()
    cart_file_path = "event_management_system/data/cart.txt"
    order_details = []

    for data in ticket_details:
        event_price = float(data[-2])
        quantity = int(data[-1])
        total_price = f"{event_price * quantity:.2f}"

        order_details.append(
            [
                data[0],
                data[1],
                data[2],
                data[3],
                data[4],
                data[-2],
                data[-1],
                total_price,
            ]
        )

    save_details_to_file(cart_file_path, order_details)


def create_transaction_file_headers() -> None:
    """
    Create headers for the transaction file.

    :return: None
    """
    cart_filename = "event_management_system/data/transactions.txt"
    cart_headers = [
        "transaction_id",
        "username",
        "bank_name",
        "bank_reference_number",
        "transaction_entry_date",
        "transaction_entry_time",
        "payment_mode",
        "card_type",
        "transaction_amount",
        "transaction_status",
    ]
    ems.add_file_headers(cart_filename, cart_headers)


def display_ticket_summary(username: str, event_code: str) -> None:
    """
    Display the ticket summary for the customer after checking out their cart.

    :username: The username of the user.
    :event_code: The event code of the event.
    :return: None
    """
    print("\n\n" + ("+" * 32))
    print("\tTICKET SUMMARY")
    print("+" * 32)

    tickets_file = "event_management_system/data/tickets.txt"

    with open(tickets_file, "r") as infile:
        contents = infile.readlines()[1:]  # Skip the header row
        data_list = [item.strip().split(";") for item in contents]
        for data in data_list:
            if username == data[3] and event_code == data[2]:
                formatted_date = ems.format_datetime(
                    data[-4], "%Y-%m-%d", "%A, %b %d, %Y"
                )
                formatted_time = ems.format_datetime(
                    data[-3], "%H:%M", "%-H:%M %p"
                )  # Format the time (replace dash with hashtag on Windows)
                print(f"\n\033[1mTicket ID:\033[0m {data[0]}")
                print(f"\033[1mEvent Name:\033[0m {data[1]}")
                print(f"\033[1mEvent Code:\033[0m {data[2]}")
                print(f"\033[1mAttendee Name:\033[0m {data[4]}")
                print(f"\033[1mEmail Address:\033[0m {data[5]}")
                print(f"\033[1mContact Number:\033[0m {data[6]}")
                print(f"\033[1mLocation:\033[0m {data[7]}")
                print(
                    f"\033[1mEvent Date:\033[0m {formatted_date}, {formatted_time} GMT"
                )


def save_transaction_details(
    username: str, event_code: str, transaction_details: list
) -> None:
    """
    Wrapper function to save the transaction details to the transaction file.

    :param username: The username of the user.
    :param event_code: The event code of the event.
    :return: None
    """
    create_transaction_file_headers()
    transaction_file_path = "event_management_system/data/transactions.txt"
    transaction_status = "SUCCESSFUL"
    transaction_record = []

    for data in transaction_details:
        transaction_record.append(
            [
                data[0],
                data[1],
                data[2],
                data[3],
                data[4],
                data[5],
                data[6],
                data[7],
                data[8],
                transaction_status,
            ]
        )

    save_details_to_file(transaction_file_path, transaction_record)
    print("\n" + ("-" * 31))
    print("----- PAYMENT SUCCESSFUL! -----")
    print("-" * 31)
    display_ticket_summary(username, event_code)


def display_cart_item_summary(username: str) -> list:
    """
    Display the cart item summary.

    :username: The username of the client
    :return: list
    """
    cart_file = "event_management_system/data/cart.txt"
    record_found = False
    cart_items = []

    with open(cart_file, "r") as infile:
        contents = infile.readlines()[1:]  # Skip the header row
        data_list = [
            item.strip().split(";") for item in contents
        ]  # Strip whitespace/newlines in data and split them using ";" as delimiter
        for record in data_list:
            if username == record[3]:
                print(f"\n\033[1mOrder ID:\033[0m {record[0]}")
                print(f"\033[1mEvent Name:\033[0m {record[1]}")
                print(f"\033[1mAttendee Name:\033[0m {record[4]}")
                print(f"\033[1mTicket Price:\033[0m RM {float(record[-3]):.2f}")
                print(f"\033[1mPax:\033[0m {record[-2]}")
                print(f"\033[1mTotal:\033[0m RM {record[-1]}")
                print(f"\n\033[1mEVENT CODE:\033[0m {record[2]}\n")
                cart_items.append(record)
                record_found = True

    if not record_found:
        print("\n\n--- Your cart is empty. ---")
    else:
        return cart_items


def remove_cart_item(username: str, event_code: str) -> None:
    """
    Update the cart file after removing the customer has made payment for the order.

    :param username: The username of the user.
    :param event_code: The event code of the event.
    :return: None
    """
    cart_file = "event_management_system/data/cart.txt"

    with open(cart_file, "r") as infile:
        filedata = infile.readlines()
        data_list = [item.strip().split(";") for item in filedata]

    with open(cart_file, "w") as outfile:
        outfile.write(filedata[0])
        for data in data_list[1:]:
            if not (username == data[3] and event_code == data[2]):
                outfile.write(f"{';'.join(data)}\n")


def checkout_session(username: str, cart_details: list) -> None:
    """
    Manage the checkout session.

    :username: The username of the client
    :cart_details: Records containing the cart details from the cart file.
    :return: None
    """
    print(f"\n\n\033[1m{'-'*33}\033[0m")
    print("\t\033[1mCHECKOUT PANEL\033[0m")
    print(f"\033[1m{'-'*33}\033[0m")
    payment_details = []
    record_found = False

    while True:
        display_cart_item_summary(username)
        now = datetime.now()  # Get current date and time
        transaction_id = generate_data_id()[
            :8
        ]  # Generate 10 numbers for transasction id
        bank_reference_number = generate_data_id()[
            :10
        ]  # Generate 8 numbers for bank reference number
        transaction_entry_date = now.strftime("%Y-%m-%d")
        transaction_entry_time = now.strftime("%H:%M")
        event_code_input = input("\nEnter the event code you wish to make payment on: ")
        for record in cart_details:
            if event_code_input == record[2]:
                card_type = input("\nCard Type (e.g. VISA/MASTERCARD/AMEX): ").upper()
                bank_name = input("\nEnter your bank name: ")
                payment_options = display_payment_method()
                selection = ems.create_menu(payment_options, "\nCard Type: ")
                payment_mode = payment_options[selection - 1]
                total_amount = record[-1]
                payment_details.append(
                    [
                        transaction_id,
                        username,
                        bank_name,
                        bank_reference_number,
                        transaction_entry_date,
                        transaction_entry_time,
                        payment_mode,
                        card_type,
                        total_amount,
                    ]
                )
                record_found = True

        if not record_found:
            print("\n\n** Invalid event code. **")
            continue

        if not ems.ask_user_yes_no("\nMake another payment? (y/n): "):
            save_transaction_details(username, event_code_input, payment_details)
            remove_cart_item(username, event_code_input)
            break


def view_cart_item_details(username: str) -> None:
    """
    Display items in user's cart.

    :return: None
    """
    cart_items = display_cart_item_summary(username)

    if cart_items is not None:
        if ems.ask_user_yes_no("Would you like to checkout now? (y/n): "):
            checkout_session(username, cart_items)
    print("\n** BACK TO MENU **\n")


def check_profile_submenu_selection(username: str) -> None:
    """
    Check user profile submenu choice.

    :username: str
    :return: None
    """
    profile_submenu = display_profile_submenu()
    while True:
        choice = ems.create_menu(profile_submenu)
        if choice == 1:
            view_profile(username)
        elif choice == 2:
            edit_profile(username)
        elif choice == 3:
            break


def client_main() -> None:
    """
    Initiate client panel.

    :return: None
    """
    login_name = login()
    customer_main_menu = display_customer_main_menu()
    while True:
        user_selection = ems.create_menu(customer_main_menu)
        if user_selection == 1:
            booking_details = book_event_ticket(login_name)
            save_order_details(booking_details)
            save_orders_to_cart(booking_details)
        elif user_selection == 2:
            category_filename = "event_management_system/data/category.txt"
            print("\n\n** You are viewing all current event categories **")
            ems.display_all_records(category_filename)
            print("\n\n--- Backed into Menu ---\n")
        elif user_selection == 3:
            ems.get_event_summary()
        elif user_selection == 4:
            check_profile_submenu_selection(login_name)
        elif user_selection == 5:
            print("\n\n** You are now viewing your shopping cart **")
            view_cart_item_details(login_name)
        elif user_selection == 6:
            if ems.should_logout():
                break
    print("\n\n** YOU HAVE SUCCESSFULLY LOGGED OUT **\n")
    ems.main()
